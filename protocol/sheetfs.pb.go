// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: protocol/sheetfs.proto

package fs_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK           Status = 0
	Status_Exist        Status = 1
	Status_NotFound     Status = 2
	Status_WrongVersion Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "Exist",
		2: "NotFound",
		3: "WrongVersion",
	}
	Status_value = map[string]int32{
		"OK":           0,
		"Exist":        1,
		"NotFound":     2,
		"WrongVersion": 3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_sheetfs_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_protocol_sheetfs_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{0}
}

type CreateSheetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *CreateSheetRequest) Reset() {
	*x = CreateSheetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSheetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSheetRequest) ProtoMessage() {}

func (x *CreateSheetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSheetRequest.ProtoReflect.Descriptor instead.
func (*CreateSheetRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSheetRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type CreateSheetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
}

func (x *CreateSheetReply) Reset() {
	*x = CreateSheetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSheetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSheetReply) ProtoMessage() {}

func (x *CreateSheetReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSheetReply.ProtoReflect.Descriptor instead.
func (*CreateSheetReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSheetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type DeleteSheetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *DeleteSheetRequest) Reset() {
	*x = DeleteSheetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSheetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSheetRequest) ProtoMessage() {}

func (x *DeleteSheetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSheetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSheetRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteSheetRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type DeleteSheetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
}

func (x *DeleteSheetReply) Reset() {
	*x = DeleteSheetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSheetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSheetReply) ProtoMessage() {}

func (x *DeleteSheetReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSheetReply.ProtoReflect.Descriptor instead.
func (*DeleteSheetReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSheetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type OpenSheetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *OpenSheetRequest) Reset() {
	*x = OpenSheetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSheetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSheetRequest) ProtoMessage() {}

func (x *OpenSheetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSheetRequest.ProtoReflect.Descriptor instead.
func (*OpenSheetRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{5}
}

func (x *OpenSheetRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Datanode string `protobuf:"bytes,2,opt,name=datanode,proto3" json:"datanode,omitempty"`
	Version  uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{6}
}

func (x *Chunk) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chunk) GetDatanode() string {
	if x != nil {
		return x.Datanode
	}
	return ""
}

func (x *Chunk) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type OpenSheetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status   `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
	Chunks []*Chunk `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	Fd     uint64   `protobuf:"varint,3,opt,name=fd,proto3" json:"fd,omitempty"`
}

func (x *OpenSheetReply) Reset() {
	*x = OpenSheetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSheetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSheetReply) ProtoMessage() {}

func (x *OpenSheetReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSheetReply.ProtoReflect.Descriptor instead.
func (*OpenSheetReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{7}
}

func (x *OpenSheetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *OpenSheetReply) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *OpenSheetReply) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk  *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{8}
}

func (x *Cell) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *Cell) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Cell) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ReadCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     uint64 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Row    uint64 `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Column uint64 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *ReadCellRequest) Reset() {
	*x = ReadCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCellRequest) ProtoMessage() {}

func (x *ReadCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCellRequest.ProtoReflect.Descriptor instead.
func (*ReadCellRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{9}
}

func (x *ReadCellRequest) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *ReadCellRequest) GetRow() uint64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *ReadCellRequest) GetColumn() uint64 {
	if x != nil {
		return x.Column
	}
	return 0
}

type ReadCellReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
	Cell   *Cell  `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *ReadCellReply) Reset() {
	*x = ReadCellReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCellReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCellReply) ProtoMessage() {}

func (x *ReadCellReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCellReply.ProtoReflect.Descriptor instead.
func (*ReadCellReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{10}
}

func (x *ReadCellReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *ReadCellReply) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type WriteCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     uint64 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Row    uint64 `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Column uint64 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *WriteCellRequest) Reset() {
	*x = WriteCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteCellRequest) ProtoMessage() {}

func (x *WriteCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteCellRequest.ProtoReflect.Descriptor instead.
func (*WriteCellRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{11}
}

func (x *WriteCellRequest) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *WriteCellRequest) GetRow() uint64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *WriteCellRequest) GetColumn() uint64 {
	if x != nil {
		return x.Column
	}
	return 0
}

type WriteCellReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
	Cell   *Cell  `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *WriteCellReply) Reset() {
	*x = WriteCellReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteCellReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteCellReply) ProtoMessage() {}

func (x *WriteCellReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteCellReply.ProtoReflect.Descriptor instead.
func (*WriteCellReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{12}
}

func (x *WriteCellReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *WriteCellReply) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type CommitCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd      uint64 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Row     uint64 `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Column  uint64 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CommitCellRequest) Reset() {
	*x = CommitCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCellRequest) ProtoMessage() {}

func (x *CommitCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCellRequest.ProtoReflect.Descriptor instead.
func (*CommitCellRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{13}
}

func (x *CommitCellRequest) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *CommitCellRequest) GetRow() uint64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *CommitCellRequest) GetColumn() uint64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *CommitCellRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CommitCellReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
}

func (x *CommitCellReply) Reset() {
	*x = CommitCellReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCellReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCellReply) ProtoMessage() {}

func (x *CommitCellReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCellReply.ProtoReflect.Descriptor instead.
func (*CommitCellReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{14}
}

func (x *CommitCellReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

type ReadChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Offset  uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ReadChunkRequest) Reset() {
	*x = ReadChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkRequest) ProtoMessage() {}

func (x *ReadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkRequest.ProtoReflect.Descriptor instead.
func (*ReadChunkRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{15}
}

func (x *ReadChunkRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadChunkRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadChunkRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ReadChunkRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ReadChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadChunkReply) Reset() {
	*x = ReadChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkReply) ProtoMessage() {}

func (x *ReadChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkReply.ProtoReflect.Descriptor instead.
func (*ReadChunkReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{16}
}

func (x *ReadChunkReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *ReadChunkReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WriteChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Offset  uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Data    []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WriteChunkRequest) Reset() {
	*x = WriteChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunkRequest) ProtoMessage() {}

func (x *WriteChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunkRequest.ProtoReflect.Descriptor instead.
func (*WriteChunkRequest) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{17}
}

func (x *WriteChunkRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WriteChunkRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WriteChunkRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WriteChunkRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WriteChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WriteChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=sheetfs.Status" json:"status,omitempty"`
}

func (x *WriteChunkReply) Reset() {
	*x = WriteChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_sheetfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunkReply) ProtoMessage() {}

func (x *WriteChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_sheetfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunkReply.ProtoReflect.Descriptor instead.
func (*WriteChunkReply) Descriptor() ([]byte, []int) {
	return file_protocol_sheetfs_proto_rawDescGZIP(), []int{18}
}

func (x *WriteChunkReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

var File_protocol_sheetfs_proto protoreflect.FileDescriptor

var file_protocol_sheetfs_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66,
	0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x64, 0x22, 0x58, 0x0a, 0x04, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x22, 0x5b, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x66, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0x4c,
	0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x5c, 0x0a, 0x0e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0x67, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x6f,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x68, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2a, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x32, 0xaa, 0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x1b,
	0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x19,
	0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x66, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x93, 0x01,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x66, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x65, 0x74, 0x66,
	0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x6f, 0x75, 0x72, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3b, 0x66, 0x73,
	0x5f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_sheetfs_proto_rawDescOnce sync.Once
	file_protocol_sheetfs_proto_rawDescData = file_protocol_sheetfs_proto_rawDesc
)

func file_protocol_sheetfs_proto_rawDescGZIP() []byte {
	file_protocol_sheetfs_proto_rawDescOnce.Do(func() {
		file_protocol_sheetfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_sheetfs_proto_rawDescData)
	})
	return file_protocol_sheetfs_proto_rawDescData
}

var file_protocol_sheetfs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocol_sheetfs_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_protocol_sheetfs_proto_goTypes = []interface{}{
	(Status)(0),                // 0: sheetfs.Status
	(*Empty)(nil),              // 1: sheetfs.Empty
	(*CreateSheetRequest)(nil), // 2: sheetfs.CreateSheetRequest
	(*CreateSheetReply)(nil),   // 3: sheetfs.CreateSheetReply
	(*DeleteSheetRequest)(nil), // 4: sheetfs.DeleteSheetRequest
	(*DeleteSheetReply)(nil),   // 5: sheetfs.DeleteSheetReply
	(*OpenSheetRequest)(nil),   // 6: sheetfs.OpenSheetRequest
	(*Chunk)(nil),              // 7: sheetfs.Chunk
	(*OpenSheetReply)(nil),     // 8: sheetfs.OpenSheetReply
	(*Cell)(nil),               // 9: sheetfs.Cell
	(*ReadCellRequest)(nil),    // 10: sheetfs.ReadCellRequest
	(*ReadCellReply)(nil),      // 11: sheetfs.ReadCellReply
	(*WriteCellRequest)(nil),   // 12: sheetfs.WriteCellRequest
	(*WriteCellReply)(nil),     // 13: sheetfs.WriteCellReply
	(*CommitCellRequest)(nil),  // 14: sheetfs.CommitCellRequest
	(*CommitCellReply)(nil),    // 15: sheetfs.CommitCellReply
	(*ReadChunkRequest)(nil),   // 16: sheetfs.ReadChunkRequest
	(*ReadChunkReply)(nil),     // 17: sheetfs.ReadChunkReply
	(*WriteChunkRequest)(nil),  // 18: sheetfs.WriteChunkRequest
	(*WriteChunkReply)(nil),    // 19: sheetfs.WriteChunkReply
}
var file_protocol_sheetfs_proto_depIdxs = []int32{
	0,  // 0: sheetfs.CreateSheetReply.status:type_name -> sheetfs.Status
	0,  // 1: sheetfs.DeleteSheetReply.status:type_name -> sheetfs.Status
	0,  // 2: sheetfs.OpenSheetReply.status:type_name -> sheetfs.Status
	7,  // 3: sheetfs.OpenSheetReply.chunks:type_name -> sheetfs.Chunk
	7,  // 4: sheetfs.Cell.chunk:type_name -> sheetfs.Chunk
	0,  // 5: sheetfs.ReadCellReply.status:type_name -> sheetfs.Status
	9,  // 6: sheetfs.ReadCellReply.cell:type_name -> sheetfs.Cell
	0,  // 7: sheetfs.WriteCellReply.status:type_name -> sheetfs.Status
	9,  // 8: sheetfs.WriteCellReply.cell:type_name -> sheetfs.Cell
	0,  // 9: sheetfs.CommitCellReply.status:type_name -> sheetfs.Status
	0,  // 10: sheetfs.ReadChunkReply.status:type_name -> sheetfs.Status
	0,  // 11: sheetfs.WriteChunkReply.status:type_name -> sheetfs.Status
	2,  // 12: sheetfs.MasterNode.CreateSheet:input_type -> sheetfs.CreateSheetRequest
	4,  // 13: sheetfs.MasterNode.DeleteSheet:input_type -> sheetfs.DeleteSheetRequest
	6,  // 14: sheetfs.MasterNode.OpenSheet:input_type -> sheetfs.OpenSheetRequest
	10, // 15: sheetfs.MasterNode.ReadCell:input_type -> sheetfs.ReadCellRequest
	12, // 16: sheetfs.MasterNode.WriteCell:input_type -> sheetfs.WriteCellRequest
	14, // 17: sheetfs.MasterNode.CommitCell:input_type -> sheetfs.CommitCellRequest
	16, // 18: sheetfs.DataNode.ReadChunk:input_type -> sheetfs.ReadChunkRequest
	18, // 19: sheetfs.DataNode.WriteChunk:input_type -> sheetfs.WriteChunkRequest
	3,  // 20: sheetfs.MasterNode.CreateSheet:output_type -> sheetfs.CreateSheetReply
	5,  // 21: sheetfs.MasterNode.DeleteSheet:output_type -> sheetfs.DeleteSheetReply
	8,  // 22: sheetfs.MasterNode.OpenSheet:output_type -> sheetfs.OpenSheetReply
	11, // 23: sheetfs.MasterNode.ReadCell:output_type -> sheetfs.ReadCellReply
	13, // 24: sheetfs.MasterNode.WriteCell:output_type -> sheetfs.WriteCellReply
	15, // 25: sheetfs.MasterNode.CommitCell:output_type -> sheetfs.CommitCellReply
	17, // 26: sheetfs.DataNode.ReadChunk:output_type -> sheetfs.ReadChunkReply
	19, // 27: sheetfs.DataNode.WriteChunk:output_type -> sheetfs.WriteChunkReply
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protocol_sheetfs_proto_init() }
func file_protocol_sheetfs_proto_init() {
	if File_protocol_sheetfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_sheetfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSheetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSheetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSheetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSheetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSheetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSheetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCellReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteCellReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCellReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_sheetfs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_sheetfs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_protocol_sheetfs_proto_goTypes,
		DependencyIndexes: file_protocol_sheetfs_proto_depIdxs,
		EnumInfos:         file_protocol_sheetfs_proto_enumTypes,
		MessageInfos:      file_protocol_sheetfs_proto_msgTypes,
	}.Build()
	File_protocol_sheetfs_proto = out.File
	file_protocol_sheetfs_proto_rawDesc = nil
	file_protocol_sheetfs_proto_goTypes = nil
	file_protocol_sheetfs_proto_depIdxs = nil
}
